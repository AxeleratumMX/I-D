.. _specs/rfc7662:

RFC7662: OAuth 2.0 Token Introspection
======================================

.. meta::
    :description: API references on RFC7009 Authlib implementation.

This section contains the generic implementation of RFC7662_.

.. _RFC7662: https://tools.ietf.org/html/rfc7662

.. module:: authlib.oauth2.rfc7662

.. _register_introspection_endpoint:

Register Introspection Endpoint
-------------------------------

With the help of ``register_endpoint`` offered by :ref:`flask_oauth2_server`,
we can easily add introspection endpoint to the authorization server. But
first, we need to implement the missing methods::

    from authlib.oauth2.rfc7662 import IntrospectionEndpoint

    class MyIntrospectionEndpoint(IntrospectionEndpoint):
        def query_token(self, token, token_type_hint, client):
            if token_type_hint == 'access_token':
                tok = Token.query.filter_by(access_token=token).first()
            elif token_type_hint == 'refresh_token':
                tok = Token.query.filter_by(refresh_token=token).first()
            else:
                # without token_type_hint
                tok = Token.query.filter_by(access_token=token).first()
                if not tok:
                    tok = Token.query.filter_by(refresh_token=token).first()
            if tok:
                if tok.client_id == client.client_id:
                    return tok
                if has_introspect_permission(client):
                    return tok

        def introspect_token(self, token):
            return {
                'active': True,
                'client_id': token.client_id,
                'token_type': token.token_type,
                'username': get_token_username(token),
                'scope': token.get_scope(),
                'sub': get_token_user_sub(token),
                'aud': token.client_id,
                'iss': 'https://server.example.com/',
                'exp': token.expires_at,
                'iat': token.issued_at,
            }

    # register it to authorization server
    server.register_endpoint(MyIntrospectionEndpoint)

After the registration, we can create a response with::

    @app.route('/oauth/introspect', methods=['POST'])
    def introspect_token():
        return server.create_endpoint_response(MyIntrospectionEndpoint.ENDPOINT_NAME)


API Reference
-------------

.. autoclass:: IntrospectionEndpoint
    :member-order: bysource
    :members:
    :inherited-members:
